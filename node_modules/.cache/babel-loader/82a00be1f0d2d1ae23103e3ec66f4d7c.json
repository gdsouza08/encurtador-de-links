{"ast":null,"code":"// buscar os links salvos\nexport async function getLinkSave(key) {\n  const myLinks = await localStorage.getItem(key);\n  let linksSaves = JSON.parse(myLinks) || [];\n  return linksSaves;\n} // salvar um link no localstorage\n\nexport async function saveLink(key, newLink) {\n  let linksStored = await getLinkSave(key); // não duplicar link com mesmo ID\n\n  const hasLink = linksStored.some(link => link.id === newLink.id);\n\n  if (hasLink) {\n    console.log(\"LINK JÁ EXISTE\");\n    return;\n  } // adicionar novo link na lista\n\n\n  linksStored.push(newLink);\n  await localStorage.setItem(key, JSON.stringify(linksStored));\n  console.log('LINK SALVO');\n}","map":{"version":3,"sources":["/home/guilherme/Documentos/Projects/git/encurtador-de-links/src/services/storeLink.js"],"names":["getLinkSave","key","myLinks","localStorage","getItem","linksSaves","JSON","parse","saveLink","newLink","linksStored","hasLink","some","link","id","console","log","push","setItem","stringify"],"mappings":"AAAA;AACA,OAAO,eAAeA,WAAf,CAA2BC,GAA3B,EAAgC;AACnC,QAAMC,OAAO,GAAG,MAAMC,YAAY,CAACC,OAAb,CAAqBH,GAArB,CAAtB;AAEA,MAAII,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAX,KAAuB,EAAxC;AAEA,SAAOG,UAAP;AACH,C,CAED;;AACA,OAAO,eAAeG,QAAf,CAAwBP,GAAxB,EAA6BQ,OAA7B,EAAsC;AACzC,MAAIC,WAAW,GAAG,MAAMV,WAAW,CAACC,GAAD,CAAnC,CADyC,CAGzC;;AACA,QAAMU,OAAO,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA7C,CAAhB;;AAEA,MAAGH,OAAH,EAAY;AACRI,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACH,GATwC,CAWzC;;;AACAN,EAAAA,WAAW,CAACO,IAAZ,CAAiBR,OAAjB;AACA,QAAMN,YAAY,CAACe,OAAb,CAAqBjB,GAArB,EAA0BK,IAAI,CAACa,SAAL,CAAeT,WAAf,CAA1B,CAAN;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH","sourcesContent":["// buscar os links salvos\nexport async function getLinkSave(key) {\n    const myLinks = await localStorage.getItem(key)\n\n    let linksSaves = JSON.parse(myLinks) || [];\n\n    return linksSaves;\n}\n\n// salvar um link no localstorage\nexport async function saveLink(key, newLink) {\n    let linksStored = await getLinkSave(key);\n\n    // não duplicar link com mesmo ID\n    const hasLink = linksStored.some(link => link.id === newLink.id)\n\n    if(hasLink) {\n        console.log(\"LINK JÁ EXISTE\")\n        return;\n    }\n\n    // adicionar novo link na lista\n    linksStored.push(newLink)\n    await localStorage.setItem(key, JSON.stringify(linksStored))\n    console.log('LINK SALVO')\n}\n"]},"metadata":{},"sourceType":"module"}